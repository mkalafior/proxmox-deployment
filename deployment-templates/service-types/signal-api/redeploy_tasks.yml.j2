# Signal CLI REST API Redeployment Tasks
- name: Fetch latest code from repository
  git:
    repo: "{{ signal_api_repo | default('https://github.com/bbernhard/signal-cli-rest-api.git') }}"
    dest: "{{ app_dir }}"
    version: "{{ signal_api_version | default('HEAD') }}"
    force: yes
  become_user: "{{ app_user }}"
  register: git_result

- name: Check if go.mod changed
  stat:
    path: "{{ app_dir }}/src/go.mod"
    checksum_algorithm: md5
  register: new_go_mod

- name: Get previous go.mod checksum
  shell: |
    if [ -f "{{ app_dir }}/.go.mod.checksum" ]; then
      cat {{ app_dir }}/.go.mod.checksum
    else
      echo "none"
    fi
  register: old_go_mod_checksum
  changed_when: false

- name: Determine if dependencies need update
  set_fact:
    dependencies_changed: "{{ git_result.changed or new_go_mod.stat.checksum != old_go_mod_checksum.stdout }}"

- name: Download Go dependencies
  shell: |
    export PATH=$PATH:/usr/local/go/bin
    go mod download
  args:
    chdir: "{{ app_dir }}/src"
  become_user: "{{ app_user }}"
  when: dependencies_changed or force_dependency_update | default(false)

- name: Tidy Go modules
  shell: |
    export PATH=$PATH:/usr/local/go/bin
    go mod tidy
  args:
    chdir: "{{ app_dir }}/src"
  become_user: "{{ app_user }}"
  when: dependencies_changed or force_dependency_update | default(false)

- name: Build Signal CLI REST API
  shell: |
    export PATH=$PATH:/usr/local/go/bin
    go build -o ../{{ app_service_name }} .
  args:
    chdir: "{{ app_dir }}/src"
  become_user: "{{ app_user }}"
  environment:
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: "1"
  register: build_result
  when: skip_build | default(false) == false

- name: Check build results
  fail:
    msg: "Build failed for {{ service_name }}: {{ build_result.stderr }}"
  when:
    - skip_build | default(false) == false
    - build_result.failed | default(false)

- name: Verify binary was created
  stat:
    path: "{{ app_dir }}/{{ app_service_name }}"
  register: binary_check
  when: skip_build | default(false) == false

- name: Ensure binary is executable
  file:
    path: "{{ app_dir }}/{{ app_service_name }}"
    mode: '0755'
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
  when: 
    - skip_build | default(false) == false
    - binary_check.stat.exists

- name: Save go.mod checksum
  shell: echo "{{ new_go_mod.stat.checksum }}" > {{ app_dir }}/.go.mod.checksum
  when: dependencies_changed and new_go_mod.stat.exists

- name: Set build status
  set_fact:
    build_completed: "{{ not (skip_build | default(false)) and binary_check.stat.exists | default(false) }}"
