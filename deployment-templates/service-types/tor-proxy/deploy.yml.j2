---
# Deployment playbook for {{ service_name }} tor-proxy service
- name: Deploy {{ service_name }} to Proxmox VE
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - group_vars/all.yml

  tasks:
    - name: Validate environment variables
      assert:
        that:
          - proxmox_host is defined and proxmox_host != ""

    - name: Check for SSH public key
      stat:
        path: "{{ ssh_public_key_path }}"
      register: ssh_key_stat

    - name: Generate dedicated Proxmox SSH key if it doesn't exist
      openssh_keypair:
        path: "{{ ssh_public_key_path | replace('.pub', '') }}"
        type: ed25519
      when: not ssh_key_stat.stat.exists

    - name: Read SSH public key
      slurp:
        src: "{{ ssh_public_key_path }}"
      register: ssh_public_key_content

    - name: Create Proxmox container via API
      shell: |
        curl -k -X POST \
          -H "Authorization: PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "vmid={{ vm_id }}&unprivileged=1&features=nesting%3D1&password={{ (lookup('password', '/tmp/vm_root_password chars=ascii_letters,digits length=16')) | urlencode }}&ssh-public-keys={{ ssh_public_key_content.content | b64decode | trim | urlencode }}&ostemplate={{ vm_os_template | urlencode }}&rootfs={{ (vm_storage ~ ':' ~ vm_disk_size) | urlencode }}&cores={{ vm_cores }}&memory={{ vm_memory }}&swap={{ vm_swap }}&net0={{ ('name=eth0,bridge=' ~ vm_network_bridge ~ ',firewall=1,ip=dhcp') | urlencode }}" \
          "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc"
      register: proxmox_vm
      failed_when: false

    - name: Debug container creation response
      debug:
        var: proxmox_vm
        verbosity: 1

    - name: Check if container creation was successful
      fail:
        msg: |
          Container creation failed!

          API Response: {{ proxmox_vm.stdout | default('No response') }}
          Error Details: {{ proxmox_vm.stderr | default('No error details') }}
          Return Code: {{ proxmox_vm.rc | default('Unknown') }}

          Troubleshooting Tips:
          1. Check if OS template exists: {{ vm_os_template }}
          2. Verify Proxmox node name: {{ proxmox_node }}
          3. Ensure storage '{{ vm_storage }}' exists and has space
          4. Check API token permissions for VM creation
          5. Verify VM ID {{ vm_id }} is not already in use

          Run the debug script: ./tools/proxmox-debug.sh
      when: proxmox_vm.rc != 0 or (proxmox_vm.stdout | default('')) == '' or ((proxmox_vm.stdout | from_json).data is not defined) or ((proxmox_vm.stdout | from_json).data is none)

    - name: Extract UPID from successful container creation
      set_fact:
        container_upid: "{{ (proxmox_vm.stdout | from_json).data }}"
      when: proxmox_vm.rc == 0 and (proxmox_vm.stdout | from_json).data is defined

    - name: Start the container (idempotent)
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/status/start"
        method: POST
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        status_code: [200, 500]
        timeout: 60
      register: start_result
      failed_when: false
      changed_when: "start_result.status == 200"

    - name: Pause to allow boot
      pause:
        seconds: 10

    # Progressive backoff attempts for slow PVE clusters (10s, 15s, 20s, 30s, 30s)
    - name: Backoff attempt 1 - wait 10s
      pause:
        seconds: 10
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 1
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 1
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Backoff attempt 2 - wait 15s
      pause:
        seconds: 15
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 2
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 2
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Backoff attempt 3 - wait 20s
      pause:
        seconds: 20
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 3
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 3
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Backoff attempt 4 - wait 30s
      pause:
        seconds: 30
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 4
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 4
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Backoff attempt 5 - wait 30s
      pause:
        seconds: 30
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 5
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 5
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Fallback - get container IP via pct exec
      shell: |
        /usr/sbin/pct exec {{ vm_id }} -- sh -lc "ip -o -4 addr show dev eth0 | awk '{print \\$4}' | head -n1"
      register: pct_ip_result
      changed_when: false
      ignore_errors: true
      delegate_to: "{{ proxmox_host }}"
      environment:
        PATH: "/usr/sbin:/usr/bin:/bin:/sbin"
      when: container_ip is not defined or (container_ip | default('')) == ''

    - name: Set container_ip from pct fallback
      set_fact:
        container_ip: "{{ (pct_ip_result.stdout | default('')) | regex_replace('/.*$', '') }}"
      when:
        - pct_ip_result is defined
        - (container_ip | default('')) == ''

    - name: Extract container IP
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined

    - name: Fail if IP discovery failed
      fail:
        msg: "Could not determine container IP"
      when: container_ip is not defined or (container_ip | default('')) == ''

    - name: Wait for SSH to become available
      wait_for:
        host: "{{ container_ip }}"
        port: 22
        timeout: 60

    - name: Add container to dynamic inventory
      add_host:
        name: "{{ container_ip }}"
        groups: proxmox_containers
        ansible_host: "{{ container_ip }}"
        ansible_user: root
        ansible_ssh_private_key_file: "{{ ssh_public_key_path | replace('.pub', '') }}"

- name: Configure container and deploy {{ service_name }} tor-proxy
  hosts: proxmox_containers
  become: true
  vars_files:
    - group_vars/all.yml

  vars:
    socks_port: "{{ app_port | default(9050) }}"
    http_proxy_port: "{{ custom_env_vars.HTTP_PROXY_PORT | default(8118) }}"
    tor_new_circuit: "{{ custom_env_vars.TOR_NewCircuitPeriod | default(60) }}"
    tor_max_dirtiness: "{{ custom_env_vars.TOR_MaxCircuitDirtiness | default(600) }}"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install Tor and Privoxy
      apt:
        name:
          - tor
          - privoxy
        state: present

    - name: Ensure privoxy group exists
      group:
        name: privoxy
        state: present
        system: yes
      when: "'privoxy' in ansible_facts.packages"

    - name: Ensure Tor directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: debian-tor
        group: debian-tor
        mode: '0700'
      loop:
        - /var/lib/tor
        - /var/log/tor

    - name: Ensure Privoxy log directory exists
      file:
        path: /var/log/privoxy
        state: directory
        owner: privoxy
        group: privoxy
        mode: '0755'

    - name: Configure torrc
      copy:
        dest: /etc/tor/torrc
        content: |
          SocksPort 0.0.0.0:{{ socks_port }}
          SocksListenAddress 0.0.0.0
          Log notice stdout
          DataDirectory /var/lib/tor
          Log notice file /var/log/tor/notices.log
          NewCircuitPeriod {{ tor_new_circuit }}
          MaxCircuitDirtiness {{ tor_max_dirtiness }}
          ExitNodes {us},{ca},{gb},{de},{nl},{se},{no},{dk},{fi},{fr},{ch},{at},{be},{es},{it},{pt},{pl},{cz},{sk},{hu},{ro},{bg},{gr},{ee},{lv},{lt},{lu},{mt},{si},{hr},{cy},{ie},{is},{li},{mc},{sm},{va},{ad},{al},{ba},{mk},{me},{rs},{tr},{ua},{by},{md},{ru},{am},{az},{ge},{kz},{kg},{tj},{tm},{uz},{mn},{cn},{jp},{kr},{tw},{hk},{mo},{sg},{th},{my},{id},{ph},{vn},{au},{nz},{fj},{pg},{sb},{vu},{nc},{pf},{gu},{mp},{as},{ck},{nu},{nf},{nr},{tv},{ki},{mh},{fm},{pw},{ws},{to},{wf},{tk},{cc},{cx},{hm},{aq},{bv},{gs},{hm},{tf},{sj},{ax},{fo},{gg},{im},{je},{gi},{pt},{es},{pt},{es},{pt},{es}
          StrictNodes 0
        owner: debian-tor
        group: debian-tor
        mode: '0644'

    - name: Configure privoxy
      copy:
        dest: /etc/privoxy/config
        content: |
          listen-address 0.0.0.0:{{ http_proxy_port }}
          forward-socks5t / 127.0.0.1:{{ socks_port }} .
          logfile /var/log/privoxy/logfile
          actionsfile default.action
          filterfile default.filter
          debug 1
          toggle 1
        owner: privoxy
        group: privoxy
        mode: '0644'

    - name: Open firewall ports (22, socks, http_proxy)
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "22"
        - "{{ socks_port }}"
        - "{{ http_proxy_port }}"

    - name: Ensure services are enabled and running
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - tor@default
        - privoxy

    - name: Restart services to apply configuration changes
      systemd:
        name: "{{ item }}"
        state: restarted
        daemon_reload: yes
      loop:
        - tor@default
        - privoxy

    - name: Wait for services to fully start
      pause:
        seconds: 5

    - name: Verify Tor is listening on correct interface
      shell: |
        ss -tlnp | grep ":{{ socks_port }}" | grep "0.0.0.0"
      register: tor_listen_check
      failed_when: tor_listen_check.rc != 0
      changed_when: false

    - name: Verify Privoxy is listening on correct interface
      shell: |
        ss -tlnp | grep ":{{ http_proxy_port }}" | grep "0.0.0.0"
      register: privoxy_listen_check
      failed_when: privoxy_listen_check.rc != 0
      changed_when: false

    - name: Health check - socks5 to torproject (optional)
      shell: |
        curl -sS --socks5 127.0.0.1:{{ socks_port }} --connect-timeout 10 https://check.torproject.org | head -n1
      register: socks_check
      changed_when: false
      failed_when: false
      when: "'curl' in ansible_facts.packages"

    - name: Health check - http proxy to example.com (optional)
      shell: |
        curl -sS -x http://127.0.0.1:{{ http_proxy_port }} --connect-timeout 10 https://example.com | head -n1
      register: http_check
      changed_when: false
      failed_when: false
      when: "'curl' in ansible_facts.packages"

    - name: Show health checks
      debug:
        msg: |
          Socks5 check (first line): {{ socks_check.stdout | default('n/a') }}
          HTTP proxy check (first line): {{ http_check.stdout | default('n/a') }}

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

