---
# Deployment playbook for {{ service_name }} tor-proxy service
- name: Deploy {{ service_name }} to Proxmox VE
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - group_vars/all.yml

  tasks:
    - name: Validate environment variables
      assert:
        that:
          - proxmox_host is defined and proxmox_host != ""

    - name: Check for SSH public key
      stat:
        path: "{{ ssh_public_key_path }}"
      register: ssh_key_stat

    - name: Generate dedicated Proxmox SSH key if it doesn't exist
      openssh_keypair:
        path: "{{ ssh_public_key_path | replace('.pub', '') }}"
        type: ed25519
      when: not ssh_key_stat.stat.exists

    - name: Read SSH public key
      slurp:
        src: "{{ ssh_public_key_path }}"
      register: ssh_public_key_content

    - name: Create Proxmox container via API
      shell: |
        curl -k -X POST \
          -H "Authorization: PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "vmid={{ vm_id }}&unprivileged=1&features=nesting%3D1&password={{ lookup('password', '/tmp/vm_root_password chars=ascii_letters,digits length=16') }}&ssh-public-keys={{ ssh_public_key_content.content | b64decode | trim | urlencode }}&ostemplate={{ vm_os_template | urlencode }}&rootfs={{ vm_storage }}%3A{{ vm_disk_size }}&cores={{ vm_cores }}&memory={{ vm_memory }}&swap={{ vm_swap }}&net0=name%3Deth0%2Cbridge%3D{{ vm_network_bridge }}%2Cfirewall%3D1%2Cip6%3Ddhcp%2Cip%3Ddhcp" \
          "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc"
      register: proxmox_vm

    - name: Start the container (idempotent)
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/status/start"
        method: POST
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        status_code: [200, 500]
        timeout: 60
      register: start_result
      failed_when: false
      changed_when: "start_result.status == 200"

    - name: Pause to allow boot
      pause:
        seconds: 10

    - name: Get container network interfaces via Proxmox API (retry until inet appears)
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      retries: 10
      delay: 3
      until: "container_interfaces_result.json is defined and (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | map(attribute='inet') | list | length) > 0"

    - name: Extract container IP
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"

    - name: Wait for SSH to become available
      wait_for:
        host: "{{ container_ip }}"
        port: 22
        timeout: 60

    - name: Add container to dynamic inventory
      add_host:
        name: "{{ container_ip }}"
        groups: proxmox_containers
        ansible_host: "{{ container_ip }}"
        ansible_user: root
        ansible_ssh_private_key_file: "{{ ssh_public_key_path | replace('.pub', '') }}"

- name: Configure container and deploy {{ service_name }} tor-proxy
  hosts: proxmox_containers
  become: true
  vars_files:
    - group_vars/all.yml

  vars:
    socks_port: "{{ app_port | default(9050) }}"
    http_proxy_port: "{{ custom_env_vars.HTTP_PROXY_PORT | default(8118) }}"
    tor_new_circuit: "{{ custom_env_vars.TOR_NewCircuitPeriod | default(60) }}"
    tor_max_dirtiness: "{{ custom_env_vars.TOR_MaxCircuitDirtiness | default(600) }}"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install Tor and Privoxy
      apt:
        name:
          - tor
          - privoxy
        state: present

    - name: Configure torrc
      copy:
        dest: /etc/tor/torrc
        content: |
          SocksPort 0.0.0.0:{{ socks_port }}
          Log notice stdout
          NewCircuitPeriod {{ tor_new_circuit }}
          MaxCircuitDirtiness {{ tor_max_dirtiness }}
        owner: root
        group: root
        mode: '0644'

    - name: Configure privoxy
      copy:
        dest: /etc/privoxy/config
        content: |
          listen-address 0.0.0.0:{{ http_proxy_port }}
          forward-socks5t / 127.0.0.1:{{ socks_port }} .
          logfile /var/log/privoxy/logfile
          actionsfile default.action
          filterfile default.filter
        owner: root
        group: root
        mode: '0644'

    - name: Open firewall ports (22, socks, http_proxy)
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "22"
        - "{{ socks_port }}"
        - "{{ http_proxy_port }}"

    - name: Ensure services are enabled and running
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - tor
        - privoxy

    - name: Health check - socks5 to torproject (optional)
      shell: |
        curl -sS --socks5 127.0.0.1:{{ socks_port }} https://check.torproject.org | head -n1
      register: socks_check
      changed_when: false
      failed_when: false

    - name: Health check - http proxy to example.com (optional)
      shell: |
        curl -sS -x http://127.0.0.1:{{ http_proxy_port }} https://example.com | head -n1
      register: http_check
      changed_when: false
      failed_when: false

    - name: Show health checks
      debug:
        msg: |
          Socks5 check (first line): {{ socks_check.stdout | default('n/a') }}
          HTTP proxy check (first line): {{ http_check.stdout | default('n/a') }}

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

