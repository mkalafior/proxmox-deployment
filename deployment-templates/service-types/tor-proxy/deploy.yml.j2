---
# Deployment playbook for {{ service_name }} tor-proxy service
- name: Deploy {{ service_name }} to Proxmox VE
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - group_vars/all.yml
  
  tasks:
    - name: Validate environment variables
      assert:
        that:
          - proxmox_host is defined and proxmox_host != ""
          - >
            (proxmox_token_id is defined and proxmox_token_id != "" and 
             proxmox_token_secret is defined and proxmox_token_secret != "") or
            (proxmox_user is defined and proxmox_user != "" and 
             proxmox_password is defined and proxmox_password != "")
        fail_msg: |
          Required Proxmox authentication must be configured.

    - name: Check for SSH public key
      stat:
        path: "{{ ssh_public_key_path }}"
      register: ssh_key_stat

    - name: Generate dedicated Proxmox SSH key if it doesn't exist
      openssh_keypair:
        path: "{{ ssh_public_key_path | replace('.pub', '') }}"
        type: ed25519
      when: not ssh_key_stat.stat.exists

    - name: Read SSH public key
      slurp:
        src: "{{ ssh_public_key_path }}"
      register: ssh_public_key_content

    - name: Create Proxmox container via API
      shell: |
        curl -k -X POST \
          -H "Authorization: PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "vmid={{ vm_id }}&unprivileged=1&features=nesting%3D1&password={{ (lookup('password', '/tmp/vm_root_password chars=ascii_letters,digits length=16')) | urlencode }}&ssh-public-keys={{ ssh_public_key_content.content | b64decode | trim | urlencode }}&ostemplate={{ vm_os_template | urlencode }}&rootfs={{ (vm_storage ~ ':' ~ vm_disk_size) | urlencode }}&cores={{ vm_cores }}&memory={{ vm_memory }}&swap={{ vm_swap }}&net0={{ ('name=eth0,bridge=' ~ vm_network_bridge ~ ',firewall=1,ip=dhcp') | urlencode }}" \
          "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc"
      register: proxmox_vm
      failed_when: false

    - name: Debug container creation response
      debug:
        var: proxmox_vm
        verbosity: 1

    - name: Check if container creation was successful
      fail:
        msg: |
          Container creation failed!

          API Response: {{ proxmox_vm.stdout | default('No response') }}
          Error Details: {{ proxmox_vm.stderr | default('No error details') }}
          Return Code: {{ proxmox_vm.rc | default('Unknown') }}

          Troubleshooting Tips:
          1. Check if OS template exists: {{ vm_os_template }}
          2. Verify Proxmox node name: {{ proxmox_node }}
          3. Ensure storage '{{ vm_storage }}' exists and has space
          4. Check API token permissions for VM creation
          5. Verify VM ID {{ vm_id }} is not already in use

          Run the debug script: ./tools/proxmox-debug.sh
      when: proxmox_vm.rc != 0 or (proxmox_vm.stdout | default('')) == '' or ((proxmox_vm.stdout | from_json).data is not defined) or ((proxmox_vm.stdout | from_json).data is none)

    - name: Extract UPID from successful container creation
      set_fact:
        container_upid: "{{ (proxmox_vm.stdout | from_json).data }}"
      when: proxmox_vm.rc == 0 and (proxmox_vm.stdout | from_json).data is defined

    - name: Start the container (idempotent)
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/status/start"
        method: POST
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        status_code: [200, 500]
        timeout: 60
      register: start_result
      failed_when: false
      changed_when: "start_result.status == 200"

    # Progressive backoff attempts for slow PVE clusters (20, 30, 30, 60, 60)
    - name: Backoff attempt 1 - wait 20s
      pause:
        seconds: 20
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 1
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 1
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Backoff attempt 2 - wait 30s
      pause:
        seconds: 30
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 2
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 2
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Backoff attempt 3 - wait 30s
      pause:
        seconds: 30
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 3
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 3
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Backoff attempt 4 - wait 60s
      pause:
        seconds: 60
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 4
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 4
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Backoff attempt 5 - wait 60s
      pause:
        seconds: 60
      when: (container_ip | default('')) == ''

    - name: Query interfaces after attempt 5
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        return_content: yes
        status_code: [200, 401, 403, 500]
      register: container_interfaces_result
      failed_when: false
      when: (container_ip | default('')) == ''

    - name: Set container IP after attempt 5
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - (container_ip | default('')) == ''
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Extract container IP
      set_fact:
        container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined

    - name: Fallback - get container IP via pct exec
      shell: |
        /usr/sbin/pct exec {{ vm_id }} -- sh -lc "ip -o -4 addr show dev eth0 | awk '{print \\$4}' | head -n1"
      register: pct_ip_result
      changed_when: false
      ignore_errors: true
      delegate_to: "{{ proxmox_host }}"
      environment:
        PATH: "/usr/sbin:/usr/bin:/bin:/sbin"
      when: container_ip is not defined or (container_ip | default('')) == ''

    - name: Set container_ip from pct fallback
      set_fact:
        container_ip: "{{ (pct_ip_result.stdout | default('')) | regex_replace('/.*$', '') }}"
      when:
        - pct_ip_result is defined
        - (container_ip | default('')) == ''

    - name: Fail if IP discovery failed
      fail:
        msg: "Could not determine container IP"
      when: container_ip is not defined or (container_ip | default('')) == ''

    - name: Wait for SSH to become available
      wait_for:
        host: "{{ container_ip }}"
        port: 22
        timeout: 60

    - name: Add container to dynamic inventory
      add_host:
        name: "{{ container_ip }}"
        groups: proxmox_containers
        ansible_host: "{{ container_ip }}"
        ansible_user: root
        ansible_ssh_private_key_file: "{{ ssh_public_key_path | replace('.pub', '') }}"

    - name: Save container IP locally for management scripts
      copy:
        content: "{{ container_ip }}\n"
        dest: "./vm_ip.txt"
        mode: "0644"

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

- name: Configure container and deploy {{ service_name }} tor-proxy
  hosts: proxmox_containers
  become: true
  vars_files:
    - group_vars/all.yml

  tasks:
    - name: Wait for system to be ready
      wait_for_connection:
        timeout: 300

    - name: Test internet connectivity
      uri:
        url: http://archive.ubuntu.com
        timeout: 5
      register: internet_test
      ignore_errors: true

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: not internet_test.failed

    - name: Install required packages (Tor, Privoxy, firewall, tools)
      apt:
        name:
          - tor
          - privoxy
          - qemu-guest-agent
          - ufw
          - curl
          - netcat-openbsd
        state: present
      when: not internet_test.failed

    - name: Configure firewall for Tor and HTTP proxy
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "22"
        - "{{ app_port }}"
        - "{{ http_proxy_port | default('8118') }}"

    - name: Enable firewall
      ufw:
        state: enabled

    - name: Configure torrc - SocksPort
      lineinfile:
        path: /etc/tor/torrc
        regexp: '^#?\s*SocksPort\s+'
        line: "SocksPort 0.0.0.0:{{ app_port }}"
        create: yes
        backup: yes
      notify: restart tor

    - name: Configure torrc - ControlPort
      lineinfile:
        path: /etc/tor/torrc
        regexp: '^#?\s*ControlPort\s+'
        line: "ControlPort 9051"
        create: yes
        backup: yes
      notify: restart tor

    - name: Configure torrc - ClientOnly
      lineinfile:
        path: /etc/tor/torrc
        regexp: '^#?\s*ClientOnly\s+'
        line: "ClientOnly 1"
        create: yes
        backup: yes
      notify: restart tor

    - name: Ensure tor service is enabled and started
      systemd:
        name: tor
        state: started
        enabled: yes

    - name: Configure Privoxy listen-address
      lineinfile:
        path: /etc/privoxy/config
        regexp: '^\s*listen-address\s+'
        line: "listen-address 0.0.0.0:{{ http_proxy_port | default('8118') }}"
        backup: yes
      notify: restart privoxy

    - name: Configure Privoxy to forward to Tor SOCKS5
      lineinfile:
        path: /etc/privoxy/config
        regexp: '^\s*forward-socks5t\s+/\s+127.0.0.1:'
        line: "forward-socks5t / 127.0.0.1:{{ app_port }} ."
        insertafter: EOF
        backup: yes
      notify: restart privoxy

    - name: Ensure privoxy service is enabled and started
      systemd:
        name: privoxy
        state: started
        enabled: yes

    - name: Wait for Tor SOCKS to listen
      wait_for:
        host: 127.0.0.1
        port: "{{ app_port }}"
        timeout: 30
        state: started

    - name: Wait for HTTP proxy to listen
      wait_for:
        host: 127.0.0.1
        port: "{{ http_proxy_port | default('8118') }}"
        timeout: 30
        state: started

    - name: Copy DNS authentication key
      template:
        src: bind-key.conf.j2
        dest: /etc/bind-key.conf
        mode: '0600'
        owner: root
        group: root

    - name: Install netcat for DNS connectivity testing
      apt:
        name: netcat-openbsd
        state: present

    - name: Copy DNS registration script
      template:
        src: dns-register.sh.j2
        dest: /opt/dns-register.sh
        mode: '0755'
        owner: root
        group: root

    - name: Test DNS registration script
      command: /opt/dns-register.sh test
      register: dns_test_result
      ignore_errors: true

    - name: Display DNS test result
      debug:
        msg: |
          DNS Test Result for {{ service_name }}:
          rc: {{ dns_test_result.rc | default('n/a') }}
          stdout: {{ dns_test_result.stdout | default('') }}
          stderr: {{ dns_test_result.stderr | default('') }}

    - name: Create DNS registration service
      template:
        src: dns-register.service.j2
        dest: /etc/systemd/system/dns-register.service
        mode: '0644'
      notify: reload systemd

    - name: Enable and start DNS registration service
      systemd:
        name: dns-register
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Wait for DNS registration to complete
      pause:
        seconds: 3

    - name: Test hostname resolution
      shell: nslookup {{ service_hostname }}.{{ dns_domain }} {{ dns_server }}
      register: dns_resolution_test
      ignore_errors: true

    - name: Display DNS resolution result
      debug:
        msg: |
          DNS Resolution Test for {{ service_name }}:
          rc: {{ dns_resolution_test.rc | default('n/a') }}
          stdout: {{ dns_resolution_test.stdout | default('') }}
          stderr: {{ dns_resolution_test.stderr | default('') }}

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes
    - name: restart tor
      systemd:
        name: tor
        state: restarted
    - name: restart privoxy
      systemd:
        name: privoxy
        state: restarted


