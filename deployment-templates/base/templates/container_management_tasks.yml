# Comprehensive container management tasks
# This file contains all container lifecycle management: creation, startup, and IP discovery
# Used by all deployment templates to eliminate duplication

# CONTAINER CREATION PHASE
- name: Check if container already exists
  uri:
    url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/status/current"
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
    validate_certs: "{{ proxmox_api_validate_certs }}"
    status_code: [200, 404]
    return_content: yes
  register: ct_exists_result
  failed_when: false

- name: Set container existence fact
  set_fact:
    container_exists: "{{ ct_exists_result.status | default(0) == 200 }}"

- name: Debug container creation request
  debug:
    msg: |
      🌐 Container Management:
      - Container exists: {{ container_exists }}
      - VM ID: {{ vm_id }}
      - VM Name: {{ vm_name }}
      - Node: {{ proxmox_node }}
      - Template: {{ vm_os_template }}
      - Tags: {{ container_tags_combined }}

- name: Create Proxmox container via API
  shell: |
    echo "🌐 Creating container {{ vm_name }} ({{ vm_id }})..."
    echo "📡 Request URL: https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc"
    curl -k -X POST \
      -H "Authorization: PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}" \
      -H "Content-Type: application/x-www-form-urlencoded" \
      -d "vmid={{ vm_id }}&unprivileged={{ (vm_unprivileged | default(true)) | ternary('1', '0') }}&features=nesting%3D1&password={{ (lookup('password', '/tmp/vm_root_password chars=ascii_letters,digits length=16')) | urlencode }}{% if ssh_public_key_content is defined %}&ssh-public-keys={{ ssh_public_key_content.content | b64decode | trim | urlencode }}{% endif %}&ostemplate={{ vm_os_template | urlencode }}&rootfs={{ (vm_storage ~ ':' ~ vm_disk_size) | urlencode }}&cores={{ vm_cores }}&memory={{ vm_memory }}&swap={{ vm_swap }}&net0={{ ('name=eth0,bridge=' ~ vm_network_bridge ~ ',firewall=1,ip=dhcp') | urlencode }}&tags={{ container_tags_combined | urlencode }}" \
      "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc"
  register: proxmox_vm
  failed_when: false
  when: not container_exists

- name: Debug container creation response
  debug:
    msg: |
      🔍 Container Creation Response:
      - Exit Code: {{ proxmox_vm.rc | default('skipped - container exists') }}
      - Response: {{ proxmox_vm.stdout_lines[-1] if proxmox_vm.stdout_lines else 'No response' }}
  when: not container_exists

- name: Check if container creation was successful
  fail:
    msg: |
      Container creation failed!

      API Response: {{ proxmox_vm.stdout | default('No response') }}
      Error Details: {{ proxmox_vm.stderr | default('No error details') }}
      Return Code: {{ proxmox_vm.rc | default('Unknown') }}

      Troubleshooting Tips:
      1. Check if OS template exists: {{ vm_os_template }}
      2. Verify Proxmox node name: {{ proxmox_node }}
      3. Ensure storage '{{ vm_storage }}' exists and has space
      4. Check API token permissions for VM creation
      5. Verify VM ID {{ vm_id }} is not already in use

      Run the debug script: ./tools/proxmox-debug.sh
  when:
    - not container_exists
    - proxmox_vm.rc != 0 or (proxmox_vm.stdout | default('')) == '' or not (proxmox_vm.stdout | regex_search('\\{.*\\}')) or ((proxmox_vm.stdout | regex_search('\\{.*\\}')) | from_json).data == None

- name: Extract UPID from successful container creation
  set_fact:
    container_upid: "{{ ((proxmox_vm.stdout | regex_search('\\{.*\\}')) | from_json).data }}"
  when: 
    - not container_exists
    - proxmox_vm.rc == 0 
    - (proxmox_vm.stdout | regex_search('\\{.*\\}'))

# CONTAINER CREATION TASK MONITORING
- name: Wait for container creation task to complete with backoff
  uri:
    url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/tasks/{{ container_upid }}/status"
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
    validate_certs: "{{ proxmox_api_validate_certs }}"
    timeout: 30
    return_content: yes
    status_code: [200]
  register: creation_task_status
  until: creation_task_status.json.data.status == 'stopped'
  retries: 20
  delay: 5
  when: 
    - container_upid is defined
    - not container_exists
    
- name: Check container creation task result
  fail:
    msg: |
      Container creation task failed!
      Task Status: {{ creation_task_status.json.data.status | default('unknown') }}
      Task Type: {{ creation_task_status.json.data.type | default('unknown') }}
      Exit Status: {{ creation_task_status.json.data.exitstatus | default('unknown') }}
      
      Check Proxmox web interface for detailed error information.
  when: 
    - container_upid is defined
    - not container_exists
    - creation_task_status.json.data.status == 'stopped'
    - creation_task_status.json.data.exitstatus != 'OK'

- name: Verify container exists after creation
  uri:
    url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/status/current"
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
    validate_certs: "{{ proxmox_api_validate_certs }}"
    timeout: 30
    return_content: yes
    status_code: [200]
  register: container_verify_result
  when: 
    - container_upid is defined
    - not container_exists

- name: Debug container creation completion
  debug:
    msg: |
      🎉 Container creation phase completed!
      - Task Status: {{ creation_task_status.json.data.status | default('skipped - container existed') }}
      - Container Status: {{ container_verify_result.json.data.status | default('unknown') }}
      - Container VMID: {{ container_verify_result.json.data.vmid | default(vm_id) }}
      - Ready to start: {{ container_verify_result.json.data.status in ['stopped'] if container_verify_result.json is defined else 'unknown' }}

# CONTAINER STARTUP PHASE
- name: Start the container (idempotent)
  uri:
    url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/status/start"
    method: POST
    headers:
      Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
    validate_certs: "{{ proxmox_api_validate_certs }}"
    status_code: [200, 500]
    timeout: 60
  register: start_result
  failed_when: false
  changed_when: "start_result.status == 200"

# IP DISCOVERY PHASE WITH PROGRESSIVE BACKOFF
- name: Define backoff delays for slow PVE clusters
  set_fact:
    pxd_backoff_delays: [20, 30, 30, 60, 60]

- name: Try IP discovery with progressive backoff
  include_tasks: ip_discovery_tasks.yml
  loop: "{{ pxd_backoff_delays }}"
  loop_control:
    loop_var: wait_seconds
  when: (container_ip | default('')) == ''

- name: Verify container is running before final checks
  uri:
    url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/status/current"
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
    validate_certs: "{{ proxmox_api_validate_certs }}"
    timeout: 30
    return_content: yes
    status_code: [200]
  register: container_status_result
  when: proxmox_token_id != '' and proxmox_token_secret != ''

- name: Debug container status
  debug:
    msg: |
      Container Status Debug:
      - Status: {{ container_status_result.json.data.status | default('unknown') }}
      - Uptime: {{ container_status_result.json.data.uptime | default('0') }}
      - VMID: {{ container_status_result.json.data.vmid | default('unknown') }}
      - IP Address: {{ container_ip | default('not discovered') }}
  when: container_status_result is defined

- name: Final attempt - query container status if IP discovery failed
  uri:
    url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/status/current"
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
    validate_certs: "{{ proxmox_api_validate_certs }}"
    timeout: 30
    return_content: yes
    status_code: [200, 401, 403, 500]
  register: container_status_result
  failed_when: false
  when: container_ip is not defined or (container_ip | default('')) == ''

- name: Debug final IP discovery attempt
  debug:
    msg: |
      Final IP discovery attempt for {{ service_name }} (VM {{ vm_id }}):
      
      ⚠️  IP discovery via API failed. This may be due to:
      - Container still starting up (network not ready)
      - DHCP lease not yet assigned
      - Network configuration issues
      
      💡 Manual steps to resolve:
      1. Check container status in Proxmox web interface
      2. Verify network configuration
      3. Wait a few minutes and retry deployment
      
      🔧 Alternative: SSH directly to container if you know the IP
  when: 
    - container_ip is not defined or (container_ip | default('')) == ''
    - container_status_result is defined

- name: Fail deployment if IP discovery failed
  fail:
    msg: |
      ❌ DEPLOYMENT FAILED: Could not retrieve container IP address automatically.
      
      The container was created but IP discovery failed. This prevents proper deployment.
      
      🔧 To fix this issue:
      1. Check Proxmox web interface: https://{{ proxmox_host }}:8006
      2. Navigate to node {{ proxmox_node }} -> CT {{ vm_id }} -> Summary
      3. Verify the container has an IP address
      4. If container has IP, this is an API timing issue - retry deployment
      5. If container has no IP, check network configuration
      
      📊 Debug Information:
      - Container ID: {{ vm_id }}
      - Node: {{ proxmox_node }}
      - Container Status: {{ container_status_result.json.data.status | default('unknown') }}
      
      💡 You can retry the deployment after the container gets an IP address.
  when: container_ip is not defined or (container_ip | default('')) == ''

- name: Debug container management completion
  debug:
    msg: |
      ✅ Container management completed successfully!
      - Container ID: {{ vm_id }}
      - Container Name: {{ vm_name }}
      - Node: {{ proxmox_node }}
      - IP Address: {{ container_ip }}
      - Status: Ready for application deployment

- name: Wait for SSH to become available
  wait_for:
    host: "{{ container_ip }}"
    port: 22
    delay: 5
    timeout: 30
    state: started
  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
  when: container_ip is defined

- name: Add container to dynamic inventory
  add_host:
    name: "{{ container_ip }}"
    groups: proxmox_containers
    ansible_host: "{{ container_ip }}"
    ansible_user: root
    ansible_ssh_private_key_file: "{{ ssh_public_key_path | replace('.pub', '') }}"
    vm_id: "{{ vm_id }}"
  when: container_ip is defined
