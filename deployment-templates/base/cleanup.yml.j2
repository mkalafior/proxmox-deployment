---
# Cleanup playbook for {{ service_name }} service
- name: Cleanup {{ service_name }} from Proxmox VE
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - ../global-config.yml
    - service-config.yml

  tasks:
    - name: Validate environment variables
      assert:
        that:
          - proxmox_host is defined and proxmox_host != ""
          - >
            (proxmox_token_id is defined and proxmox_token_id != "" and 
             proxmox_token_secret is defined and proxmox_token_secret != "") or
            (proxmox_user is defined and proxmox_user != "" and 
             proxmox_password is defined and proxmox_password != "")
        fail_msg: |
          Required Proxmox authentication must be configured.

    - name: Get container IP for DNS cleanup
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/interfaces"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        timeout: 30
        return_content: yes
        status_code: [200, 404, 500]
      register: container_interfaces_result
      failed_when: false
      changed_when: false

    - name: Set container IP from interfaces for DNS cleanup
      set_fact:
        cleanup_container_ip: "{{ (eth0_interface.inet | default('')) | regex_replace('/.*$', '') }}"
      vars:
        eth0_interface: "{{ container_interfaces_result.json.data | selectattr('name', 'equalto', 'eth0') | first }}"
      when:
        - container_interfaces_result is defined
        - container_interfaces_result.json is defined
        - container_interfaces_result.json.data is defined
        - (container_interfaces_result.json.data | selectattr('name','equalto','eth0') | list | length) > 0

    - name: Stop DNS registration service via API
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/exec"
        method: POST
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
          Content-Type: "application/x-www-form-urlencoded"
        body: "command=systemctl&command=stop&command=dns-register"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        status_code: [200, 404, 500]
        timeout: 30
      register: dns_stop_result
      failed_when: false
      changed_when: false
      when: cleanup_container_ip is defined

    - name: Run DNS cleanup script via API
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/exec"
        method: POST
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
          Content-Type: "application/x-www-form-urlencoded"
        body: "command=/opt/dns-register.sh&command=cleanup"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        status_code: [200, 404, 500]
        timeout: 30
      register: dns_cleanup_result
      failed_when: false
      changed_when: false
      when: cleanup_container_ip is defined

    - name: Debug DNS cleanup results
      debug:
        msg: |
          DNS cleanup attempted for {{ service_name }} (VM {{ vm_id }}):
          
          {% if cleanup_container_ip is defined %}
          ‚úÖ Container IP found: {{ cleanup_container_ip }}
          üìã DNS stop service result: {{ dns_stop_result.status | default('not attempted') }}
          üìã DNS cleanup script result: {{ dns_cleanup_result.status | default('not attempted') }}
          
          {% if dns_stop_result.status == 200 and dns_cleanup_result.status == 200 %}
          ‚úÖ DNS cleanup completed successfully
          {% else %}
          ‚ö†Ô∏è  DNS cleanup may have failed - check container logs if needed
          {% endif %}
          {% else %}
          ‚ö†Ô∏è  Could not determine container IP - DNS cleanup skipped
          ‚ÑπÔ∏è  DNS records will expire naturally based on TTL settings
          {% endif %}
      when: dns_stop_result is defined or dns_cleanup_result is defined or cleanup_container_ip is not defined

    - name: Try to stop the container (idempotent)
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}/status/stop"
        method: POST
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        status_code: [200, 500]
        timeout: 60
      register: stop_result
      failed_when: false
      changed_when: "stop_result.status == 200"

    - name: Pause briefly before deletion
      pause:
        seconds: 5

    - name: Delete the container (idempotent)
      uri:
        url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc/{{ vm_id }}"
        method: DELETE
        headers:
          Authorization: "PVEAPIToken={{ proxmox_token_id }}={{ proxmox_token_secret }}"
        validate_certs: "{{ proxmox_api_validate_certs }}"
        status_code: [200, 404, 500]
        timeout: 120
      register: delete_result
      failed_when: false
      changed_when: "delete_result.status == 200"

    # vm_ip.txt is deprecated; nothing to remove

    - name: Print cleanup summary
      debug:
        msg: "Cleanup attempted for VM {{ vm_id }} on node {{ proxmox_node }} (service {{ service_name }})"


