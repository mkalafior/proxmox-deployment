---
# Generic container deployment playbook for {{ service_name }}
- name: Deploy {{ service_name }} to Proxmox VE
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - ../global-config.yml
    - service-config.yml
  
  vars:
    # Secure temporary directory (replaces /tmp usage)
    secure_temp_dir: "{{ playbook_dir }}/../.secure_temp/{{ service_name }}_{{ ansible_date_time.epoch }}_{{ ansible_pid | default(9999) }}"
  
  tasks:
    - name: Create secure temporary directory
      file:
        path: "{{ secure_temp_dir }}"
        state: directory
        mode: '0700'
      become: false

    - name: Set secure temp directory as fact for other plays
      set_fact:
        shared_secure_temp_dir: "{{ secure_temp_dir }}"

    - name: Validate environment variables
      assert:
        that:
          - proxmox_host is defined and proxmox_host != ""
          - >
            (proxmox_token_id is defined and proxmox_token_id != "" and 
             proxmox_token_secret is defined and proxmox_token_secret != "") or
            (proxmox_user is defined and proxmox_user != "" and 
             proxmox_password is defined and proxmox_password != "")
        fail_msg: |
          Required Proxmox authentication must be configured.
          Either set API token (TOKEN_ID, TOKEN_SECRET) or username/password (PROXMOX_USER, PROXMOX_PASSWORD).
          API tokens are recommended for automation.

    - name: Debug configuration
      debug:
        msg: |
          Configuration Debug for {{ service_name }}:
          - PROXMOX_HOST: {{ proxmox_host }}
          - PROXMOX_USER: {{ proxmox_user }}
          - TOKEN_ID: {{ proxmox_token_id | default('not set') }}
          - TOKEN_SECRET: {{ 'SET' if proxmox_token_secret != '' else 'not set' }}
          
          Service Configuration:
          - Service Name: {{ service_name }}
          - VM ID: {{ vm_id }}
          - VM Name: {{ vm_name }}
          - App Port: {{ app_port }}

    - name: Display authentication method
      debug:
        msg: |
          Using {{ 'API Token' if (proxmox_token_id != '' and proxmox_token_secret != '') else 'Username/Password' }} authentication

    - name: Display container tags
      debug:
        msg: |
          Container will be created with tags: {{ (container_tags + ([project_tag] if project_tag != '' else [])) | join(',') }}
          üìã Tags breakdown:
          {% for tag in container_tags %}- {{ tag }}{% endfor %}
          {% if project_tag != '' %}- {{ project_tag }} (project tag){% endif %}
          {% if project_tag == '' %}üí° Set PROJECT_TAG environment variable to add a project-specific tag{% endif %}

    - name: Check for SSH public key
      stat:
        path: "{{ ssh_public_key_path }}"
      register: ssh_key_stat

    - name: Generate dedicated Proxmox SSH key if it doesn't exist
      openssh_keypair:
        path: "{{ ssh_public_key_path | replace('.pub', '') }}"
        type: ed25519
        comment: "proxmox-{{ vm_name }}-{{ ansible_date_time.date }}"
      when: not ssh_key_stat.stat.exists

    - name: Read SSH public key
      slurp:
        src: "{{ ssh_public_key_path }}"
      register: ssh_public_key_content
      when: ssh_public_key_path is defined

    - name: Install Ansible collections from requirements.yml (idempotent)
      command: ansible-galaxy collection install -r requirements.yml --force
      args:
        chdir: "{{ playbook_dir }}"
      changed_when: false
      delegate_to: localhost
      run_once: true
      become: false

    - name: Debug Proxmox API request details
      debug:
        msg: |
          üîç Proxmox API Request Details:
          URL: https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/lxc
          Method: POST
          VM ID: {{ vm_id }}
          Node: {{ proxmox_node }}
          Template: {{ vm_os_template }}
          Storage: {{ vm_storage }}:{{ vm_disk_size }}
          Resources: {{ vm_cores }}C/{{ vm_memory }}MB/{{ vm_swap }}MB swap
          Network: {{ vm_network_bridge }}
          Tags: {{ (container_tags + ([project_tag] if project_tag != '' else [])) | join(',') }}

    # CONTAINER MANAGEMENT - Use shared tasks to eliminate duplication
    - name: Set container tags for creation
      set_fact:
        container_tags_combined: "{{ (container_tags + ([project_tag] if project_tag != '' else [])) | join(',') }}"

    - name: Execute container management tasks (creation, startup, IP discovery)
      include_tasks: templates/container_management_tasks.yml

    # Note: We no longer persist IPs locally; use DNS/Proxmox API via CLI

    - name: Detect local custom deployment script
      stat:
        path: "{{ playbook_dir }}/scripts/custom_script.sh"
      register: local_custom_script
      become: false

    - name: Copy custom deployment script to temporary location
      copy:
        src: "{{ playbook_dir }}/scripts/custom_script.sh"
        dest: "{{ secure_temp_dir }}/custom_script.sh"
        mode: '0755'
      when: local_custom_script.stat.exists
      become: false

    - name: Create application tar archive on localhost
      shell: |
        cd {{ local_app_path }}
        # Check if .deployignore exists and build exclude options
        EXCLUDE_OPTS=""
        if [ -f .deployignore ]; then
          # Read .deployignore and convert to tar exclude options
          while IFS= read -r line || [ -n "$line" ]; do
            # Skip empty lines and comments
            if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
              # Remove leading/trailing whitespace
              line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              if [[ -n "$line" ]]; then
                EXCLUDE_OPTS="$EXCLUDE_OPTS --exclude='$line'"
              fi
            fi
          done < .deployignore
        else
          # Default exclusions if no .deployignore file
          EXCLUDE_OPTS="--exclude='node_modules' --exclude='.git' --exclude='deployment' --exclude='deployments' --exclude='*.log' --exclude='.env'"
        fi
        
        # Create tar with dynamic exclusions
        eval "tar $EXCLUDE_OPTS -czf {{ secure_temp_dir }}/app.tar.gz ."
      become: false
      when: container_ip is defined



- name: Configure container and deploy {{ service_name }} application
  hosts: proxmox_containers
  become: true
  vars_files:
    - ../global-config.yml
    - service-config.yml
  vars:
    # Use shared secure temp directory from first play
    secure_temp_dir: "{{ hostvars['localhost']['shared_secure_temp_dir'] }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  
  tasks:
    - name: Wait for system to be ready
      wait_for_connection:
        timeout: 30

    - name: Create secure temporary directory on remote
      file:
        path: "{{ secure_temp_dir }}"
        state: directory
        mode: '0700'

    - name: Test internet connectivity
      uri:
        url: http://archive.ubuntu.com
        timeout: 5
      register: internet_test
      ignore_errors: true

    - name: Skip package installation if no internet
      debug:
        msg: "No internet access - skipping package installation. Run fix-proxmox-networking.sh on Proxmox host."
      when: internet_test.failed

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: not internet_test.failed

    - name: Install system packages
      apt:
        name:
          - curl
          - wget
          - git
          - unzip
          - ufw
          - build-essential  # For native modules if needed
          - qemu-guest-agent  # For IP address discovery
        state: present
      when: not internet_test.failed

    # (collections are installed in the localhost phase above)
  
    - name: Configure firewall
      ufw:
        rule: allow
        port: "{{ item }}"
      loop: "{{ default_allowed_ports + [app_port | string] + (additional_ports | default([])) }}"

    - name: Enable firewall
      ufw:
        state: enabled

    # SERVICE-SPECIFIC INJECTION POINT: Runtime Installation
    {% if service_runtime_install is defined and service_runtime_install %}
    {% include 'service-parts/runtime_install.yml.j2' %}
    {% endif %}

    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: "{{ app_dir }}"
        create_home: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Copy and extract application files
      block:
        - name: Copy tar archive to container
          copy:
            src: "{{ secure_temp_dir }}/app.tar.gz"
            dest: "{{ secure_temp_dir }}/app.tar.gz"
            mode: '0644'

        - name: Extract application files
          unarchive:
            src: "{{ secure_temp_dir }}/app.tar.gz"
            dest: "{{ app_dir }}"
            remote_src: yes
            owner: "{{ app_user }}"
            group: "{{ app_user }}"

        - name: Clean up tar files on remote container
          file:
            path: "{{ secure_temp_dir }}/app.tar.gz"
            state: absent

      when: service_type != 'database'

    - name: Set ownership of application files
      file:
        path: "{{ app_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes
      when: service_type != 'database'

    # SERVICE-SPECIFIC INJECTION POINT: Dependency Installation
    {% if service_dependency_install is defined and service_dependency_install %}
    {% include 'service-parts/dependency_install.yml.j2' %}
    {% endif %}

    # SERVICE-SPECIFIC INJECTION POINT: Build Tasks
    {% if service_build_tasks is defined and service_build_tasks %}
    {% include 'service-parts/build_tasks.yml.j2' %}
    {% endif %}

    - name: Upload custom deployment script to container
      copy:
        src: "{{ secure_temp_dir }}/custom_script.sh"
        dest: "/opt/custom_script.sh"
        mode: '0755'
        owner: root
        group: root
      when: hostvars['localhost']['local_custom_script'].stat.exists

    - name: Run custom deployment script (service-specific hook)
      shell: "/opt/custom_script.sh"
      args:
        chdir: "{{ app_dir }}"
      become_user: "{{ app_user }}"
      environment:
        APP_DIR: "{{ app_dir }}"
        SERVICE_TYPE: "{{ service_type | default('') }}"
        NODEJS_RUNTIME: "{{ nodejs_runtime | default('') }}"
        APP_PORT: "{{ app_port | string }}"
        SERVICE_NAME: "{{ service_name }}"
      register: custom_script_result
      changed_when: false
      failed_when: false
      when: hostvars['localhost']['local_custom_script'].stat.exists

    - name: Show custom script output
      debug:
        var: custom_script_result.stdout_lines
      when: hostvars['localhost']['local_custom_script'].stat.exists

    - name: Create environment file
      template:
        src: env.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'
      when: service_type != 'database'

    # SERVICE-SPECIFIC INJECTION POINT: Systemd Service
    {% if service_systemd_service is defined and service_systemd_service %}
    - name: Create systemd service file
      template:
        src: "{{ app_service_name }}.service.j2"
        dest: "/etc/systemd/system/{{ app_service_name }}.service"
        mode: '0644'
      notify: reload systemd
      when: service_type != 'database'

    - name: Enable and start application service
      systemd:
        name: "{{ app_service_name }}"
        enabled: yes
        state: started
        daemon_reload: yes
      when: service_type != 'database'
    {% endif %}

    - name: Wait for service to be running
      pause:
        seconds: 5
      when: service_type != 'database'

    - name: Configure container DNS to use our DNS server
      copy:
        dest: /etc/resolv.conf
        content: |
          # --- BEGIN PVE ---
          search {{ dns_domain }}
          nameserver {{ dns_server }}
          nameserver 8.8.8.8
          # --- END PVE ---
        mode: '0644'
        owner: root
        group: root

    - name: Copy DNS authentication key
      template:
        src: bind-key.conf.j2
        dest: /etc/bind-key.conf
        mode: '0600'
        owner: root
        group: root

    - name: Install netcat for DNS connectivity testing
      apt:
        name: netcat-openbsd
        state: present

    - name: Copy DNS registration script
      template:
        src: dns-register.sh.j2
        dest: /opt/dns-register.sh
        mode: '0755'
        owner: root
        group: root

    - name: Test DNS registration script
      command: /opt/dns-register.sh test
      register: dns_test_result
      ignore_errors: true

    - name: Display DNS test result
      debug:
        msg: |
          DNS Test Result for {{ service_name }}:
          rc: {{ dns_test_result.rc | default('n/a') }}
          stdout: {{ dns_test_result.stdout | default('') }}
          stderr: {{ dns_test_result.stderr | default('') }}

    - name: Create DNS registration service
      template:
        src: dns-register.service.j2
        dest: /etc/systemd/system/dns-register.service
        mode: '0644'
      notify: reload systemd

    - name: Enable and start DNS registration service
      systemd:
        name: dns-register
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Wait for DNS registration to complete
      pause:
        seconds: 3

    - name: Test hostname resolution
      shell: nslookup {{ service_hostname }}.{{ dns_domain }} {{ dns_server }}
      register: dns_resolution_test
      ignore_errors: true

    - name: Display DNS resolution result
      debug:
        msg: |
          DNS Resolution Test for {{ service_name }}:
          rc: {{ dns_resolution_test.rc | default('n/a') }}
          stdout: {{ dns_resolution_test.stdout | default('') }}
          stderr: {{ dns_resolution_test.stderr | default('') }}

    # Cloudflare Tunnel Configuration (if enabled)
    - name: Check if Cloudflare domain is configured
      set_fact:
        cloudflare_enabled: "{{ cloudflare_domain is defined and cloudflare_domain != '' }}"
      
    - name: Configure Cloudflare tunnel routing
      block:
        - name: Get tunnel UUID
          shell: cloudflared tunnel list | grep 'proxmox-main' | awk '{print $1}'
          register: tunnel_uuid_result
          delegate_to: "{{ proxmox_host }}"
          
        - name: Set tunnel UUID fact
          set_fact:
            tunnel_uuid: "{{ tunnel_uuid_result.stdout.strip() }}"
            
        - name: Backup current tunnel configuration
          copy:
            src: /etc/cloudflared/config.yml
            dest: "/etc/cloudflared/config.yml.backup.{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"
            remote_src: yes
          delegate_to: "{{ proxmox_host }}"
          
        - name: Generate new tunnel configuration
          template:
            src: cloudflare-tunnel-config.yml.j2
            dest: "{{ secure_temp_dir }}/tunnel_config.yml"
          run_once: true
          
        - name: Upload new tunnel configuration
          copy:
            src: "{{ secure_temp_dir }}/tunnel_config.yml"
            dest: /etc/cloudflared/config.yml
          delegate_to: "{{ proxmox_host }}"
          run_once: true
          
        - name: Clean up temporary config file
          file:
            path: "{{ secure_temp_dir }}/tunnel_config.yml"
            state: absent
          run_once: true
          
        - name: Restart cloudflared service
          systemd:
            name: cloudflared
            state: restarted
          delegate_to: "{{ proxmox_host }}"
          
        - name: Wait for cloudflared to restart
          pause:
            seconds: 5
            
        - name: Create DNS route for tunnel
          shell: cloudflared tunnel route dns proxmox-main {{ app_subdomain }}.{{ cloudflare_domain }}
          delegate_to: "{{ proxmox_host }}"
          ignore_errors: true
            
        - name: Verify cloudflared service status
          systemd:
            name: cloudflared
          register: cloudflared_status
          delegate_to: "{{ proxmox_host }}"
          
        - name: Display Cloudflare tunnel status
          debug:
            msg: |
              Cloudflare Tunnel Status:
              Service: {{ cloudflared_status.status.ActiveState }}
              Public URL: https://{{ app_subdomain }}.{{ cloudflare_domain }}
              
      when: cloudflare_enabled | bool

    # SERVICE STATUS CHECKS (only if systemd service is enabled)
    {% if service_systemd_service is defined and service_systemd_service %}
    - name: Check service status
      systemd:
        name: "{{ app_service_name }}"
      register: service_status
      when: service_type != 'database'

    - name: Display service status
      debug:
        msg: |
          {{ service_name }} Service Status: {{ service_status.status.ActiveState }}
          Service is {{ 'running' if service_status.status.ActiveState == 'active' else 'not running' }}
      when: service_type != 'database'

    - name: Test application endpoint
      uri:
        url: "http://{{ ansible_host }}:{{ app_port }}{{ health_check_path | default('/health') }}"
        method: GET
        timeout: 10
      register: health_check
      ignore_errors: yes
      when: service_type != 'database'

    - name: Display health check result
      debug:
        msg: |
          {{ service_name }} Health check status: {{ health_check.status | default('unknown') }}
          Endpoint: http://{{ ansible_host }}:{{ app_port }}{{ health_check_path | default('/health') }}
      when: service_type != 'database'

    - name: Show recent logs
      command: journalctl -u {{ app_service_name }} --lines=10 --no-pager
      register: service_logs
      changed_when: false
      when: service_type != 'database'

    - name: Display recent logs
      debug:
        var: service_logs.stdout_lines
      when: service_type != 'database'
    {% endif %}

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes
    - name: restart tor
      systemd:
        name: tor
        state: restarted
    - name: restart privoxy
      systemd:
        name: privoxy
        state: restarted

# Cleanup play - runs on localhost after deployment completes
- name: Cleanup deployment artifacts
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - ../global-config.yml
    - service-config.yml
  
  vars:
    # Use shared secure temp directory from first play
    secure_temp_dir: "{{ hostvars['localhost']['shared_secure_temp_dir'] }}"
  
  tasks:
    - name: Create secure temporary directory
      file:
        path: "{{ secure_temp_dir }}"
        state: directory
        mode: '0700'
      become: false

    - name: Clean up secure temporary directory
      file:
        path: "{{ secure_temp_dir }}"
        state: absent
      become: false
      when: secure_temp_dir is defined
    - name: Clean up local tar file after deployment
      file:
        path: "{{ secure_temp_dir }}/app.tar.gz"
        state: absent
      become: false

    - name: Clean up temporary custom script
      file:
        path: "{{ secure_temp_dir }}/custom_script.sh"
        state: absent
      when: hostvars['localhost']['local_custom_script'].stat.exists
      become: false
