---
# Code redeployment playbook for Hello World Bun App
- name: Redeploy Hello World Bun App Code
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - group_vars/all.yml
  
  tasks:
    - name: Check if VM IP file exists
      stat:
        path: "./vm_ip.txt"
      register: vm_ip_file

    - name: Fail if no existing deployment found
      fail:
        msg: "No existing deployment found. Please run ./deploy.sh first."
      when: not vm_ip_file.stat.exists

    - name: Read VM IP
      slurp:
        src: "./vm_ip.txt"
      register: vm_ip_content

    - name: Set VM IP fact
      set_fact:
        container_ip: "{{ vm_ip_content.content | b64decode | trim }}"

    - name: Add container to inventory
      add_host:
        name: "{{ container_ip }}"
        groups: proxmox_containers
        ansible_host: "{{ container_ip }}"
        ansible_user: root
        ansible_ssh_private_key_file: "{{ ssh_public_key_path | replace('.pub', '') }}"

- name: Update application code
  hosts: proxmox_containers
  become: true
  vars_files:
    - group_vars/all.yml
  
  tasks:
    - name: Stop application service
      systemd:
        name: "{{ app_service_name }}"
        state: stopped

    - name: Create backup of current application
      archive:
        path: "{{ app_dir }}"
        dest: "/tmp/{{ app_name }}-backup-{{ ansible_date_time.epoch }}.tar.gz"
        owner: root
        group: root

    - name: Copy new application files using tar
      block:
        - name: Create tar archive of application
          shell: |
            cd {{ local_app_path }}
            tar --exclude='node_modules' \
                --exclude='.git' \
                --exclude='deployment' \
                --exclude='*.log' \
                --exclude='.env' \
                -czf /tmp/hello-world-app-update.tar.gz .
          delegate_to: localhost
          become: false

        - name: Copy tar archive to container
          copy:
            src: "/tmp/hello-world-app-update.tar.gz"
            dest: "/tmp/hello-world-app-update.tar.gz"
            mode: '0644'

        - name: Remove old application files (keep .env and node_modules)
          shell: |
            cd {{ app_dir }}
            find . -type f -not -path './node_modules/*' -not -name '.env' -delete
            find . -type d -empty -delete
          become_user: "{{ app_user }}"

        - name: Extract new application files
          unarchive:
            src: "/tmp/hello-world-app-update.tar.gz"
            dest: "{{ app_dir }}"
            remote_src: yes
            owner: "{{ app_user }}"
            group: "{{ app_user }}"

        - name: Clean up tar files on container
          file:
            path: "/tmp/hello-world-app-update.tar.gz"
            state: absent
            
        - name: Clean up local tar files
          file:
            path: "/tmp/hello-world-app-update.tar.gz"
            state: absent
          delegate_to: localhost
          become: false

    - name: Update Bun dependencies
      shell: |
        /usr/local/bin/bun install
      args:
        chdir: "{{ app_dir }}"
      become_user: "{{ app_user }}"

    - name: Start application service
      systemd:
        name: "{{ app_service_name }}"
        state: started

    - name: Wait for service to be running
      pause:
        seconds: 5

    - name: Check service status
      systemd:
        name: "{{ app_service_name }}"
      register: service_status

    - name: Test application endpoint
      uri:
        url: "http://{{ ansible_host }}:{{ app_port }}/health"
        method: GET
        timeout: 10
      register: health_check
      retries: 3
      delay: 5
      until: health_check.status == 200
      ignore_errors: yes

    - name: Display deployment result
      debug:
        msg: |
          {% if health_check.status == 200 %}
          ✅ Redeployment successful!
          Application is running at: http://{{ ansible_host }}:{{ app_port }}
          {% else %}
          ❌ Redeployment failed! Attempting rollback...
          {% endif %}

    - name: Rollback on failure
      block:
        - name: Stop failed service
          systemd:
            name: "{{ app_service_name }}"
            state: stopped

        - name: Find latest backup
          find:
            paths: "/tmp"
            patterns: "{{ app_name }}-backup-*.tar.gz"
          register: backup_files

        - name: Restore from backup
          unarchive:
            src: "{{ (backup_files.files | sort(attribute='mtime') | last).path }}"
            dest: "/"
            remote_src: yes
          when: backup_files.files | length > 0

        - name: Start service after rollback
          systemd:
            name: "{{ app_service_name }}"
            state: started

        - name: Notify rollback
          debug:
            msg: "❌ Deployment failed. Application has been rolled back to previous version."
      when: health_check.status != 200

    - name: Show recent logs
      command: journalctl -u {{ app_service_name }} --lines=10 --no-pager
      register: service_logs
      changed_when: false

    - name: Display recent logs
      debug:
        var: service_logs.stdout_lines
