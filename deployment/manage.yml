---
# Management playbook for Hello World Bun App
- name: Manage Hello World Bun App
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - group_vars/all.yml
  
  tasks:
    - name: Check if VM IP file exists
      stat:
        path: "./vm_ip.txt"
      register: vm_ip_file

    - name: Fail if no existing deployment found
      fail:
        msg: "No existing deployment found. Please run ./deploy.sh first."
      when: not vm_ip_file.stat.exists

    - name: Read VM IP
      slurp:
        src: "./vm_ip.txt"
      register: vm_ip_content

    - name: Set VM IP fact
      set_fact:
        container_ip: "{{ vm_ip_content.content | b64decode | trim }}"

    - name: Add container to inventory
      add_host:
        name: "{{ container_ip }}"
        groups: proxmox_containers
        ansible_host: "{{ container_ip }}"
        ansible_user: root
        ansible_ssh_private_key_file: "{{ ssh_public_key_path | replace('.pub', '') }}"

- name: Execute management tasks
  hosts: proxmox_containers
  become: true
  vars_files:
    - group_vars/all.yml
  
  tasks:
    - name: Check service status
      systemd:
        name: "{{ app_service_name }}"
      register: service_status
      tags: ['status', 'info']

    - name: Display service status
      debug:
        msg: |
          Service: {{ app_service_name }}
          Status: {{ service_status.status.ActiveState }}
          Enabled: {{ service_status.status.UnitFileState }}
          Since: {{ service_status.status.ActiveEnterTimestamp | default('N/A') }}
      tags: ['status', 'info']

    - name: Test application health
      uri:
        url: "http://{{ ansible_host }}:{{ app_port }}/health"
        method: GET
        timeout: 10
      register: health_check
      ignore_errors: yes
      tags: ['status', 'health']

    - name: Display health status
      debug:
        msg: |
          Health Check: {{ 'HEALTHY' if health_check.status == 200 else 'UNHEALTHY' }}
          {% if health_check.status == 200 %}
          Response: {{ health_check.json | default('No JSON response') }}
          {% endif %}
          Application URL: http://{{ ansible_host }}:{{ app_port }}
      tags: ['status', 'health']

    - name: Show service logs
      command: journalctl -u {{ app_service_name }} --lines={{ log_lines | default(20) }} --no-pager
      register: service_logs
      changed_when: false
      tags: ['logs']

    - name: Display service logs
      debug:
        var: service_logs.stdout_lines
      tags: ['logs']

    - name: Restart service
      systemd:
        name: "{{ app_service_name }}"
        state: restarted
      tags: ['restart']

    - name: Wait after restart
      pause:
        seconds: 5
      tags: ['restart']

    - name: Verify service after restart
      systemd:
        name: "{{ app_service_name }}"
      register: restart_status
      tags: ['restart']

    - name: Display restart result
      debug:
        msg: |
          Restart {{ 'SUCCESSFUL' if restart_status.status.ActiveState == 'active' else 'FAILED' }}
          Service Status: {{ restart_status.status.ActiveState }}
      tags: ['restart']

    - name: Stop service
      systemd:
        name: "{{ app_service_name }}"
        state: stopped
      tags: ['stop']

    - name: Start service
      systemd:
        name: "{{ app_service_name }}"
        state: started
      tags: ['start']

    - name: Show system resources
      shell: |
        echo "=== CPU and Memory ==="
        top -bn1 | head -5
        echo ""
        echo "=== Disk Usage ==="
        df -h
        echo ""
        echo "=== Memory Usage ==="
        free -h
      register: system_info
      changed_when: false
      tags: ['system', 'info']

    - name: Display system information
      debug:
        var: system_info.stdout_lines
      tags: ['system', 'info']
